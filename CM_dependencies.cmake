# Darknet object detection framework


INCLUDE (CheckLanguage)
CHECK_LANGUAGE (CUDA)
IF (CMAKE_CUDA_COMPILER)
	MESSAGE (STATUS "CUDA detected. Darknet willl use the GPU.")
	ENABLE_LANGUAGE (CUDA)
#	SET (CMAKE_CUDA_STANDARD 17)
#	SET (CMAKE_CUDA_STANDARD_REQUIRED ON)
#	SET (DARKNET_USE_CUDA ON)
	SET (DARKNET_CUDA_ARCHITECTURES "35;50;52;61")
#	ADD_COMPILE_DEFINITIONS (GPU) # TODO rename this to DARKNET_USE_GPU or DARKNET_USE_CUDA?
ELSE ()
	MESSAGE (WARNING "CUDA not found. Darknet will be CPU-only.")
ENDIF ()


IF (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86" OR
	CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_32" OR
	CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64" OR
	CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "AMD64")
	SET (HARDWARE_IS_X86 TRUE)
	MESSAGE (STATUS "Hardware is 32-bit or 64-bit, and seems to be Intel or AMD:  ${CMAKE_HOST_SYSTEM_PROCESSOR}")
ELSE ()
	SET (HARDWARE_IS_X86 FALSE)
	MESSAGE (STATUS "Hardware does not appear to be 32-bit or 64-bit, Intel or AMD:  ${CMAKE_HOST_SYSTEM_PROCESSOR}")
ENDIF ()


IF (CMAKE_COMPILER_IS_GNUCC OR "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
	SET (COMPILER_IS_GNU_OR_CLANG TRUE)
ELSE ()
	SET (COMPILER_IS_GNU_OR_CLANG FALSE)
ENDIF ()


FIND_PACKAGE (Threads REQUIRED)
MESSAGE (STATUS "Found Threads ${Threads_VERSION}")
SET (DARKNET_LINK_LIBS ${DARKNET_LINK_LIBS} Threads::Threads)

IF (WIN32)
	FIND_PACKAGE (PThreads4W REQUIRED)
	SET (DARKNET_LINK_LIBS ${DARKNET_LINK_LIBS} PThreads4W::PThreads4W)
ENDIF ()


FIND_PACKAGE (OpenCV CONFIG REQUIRED)
MESSAGE (STATUS "Found OpenCV ${OpenCV_VERSION}")
INCLUDE_DIRECTORIES (${OpenCV_INCLUDE_DIRS})
ADD_COMPILE_DEFINITIONS (OPENCV) # TODO remove this once OpenCV is no longer optional
SET (DARKNET_LINK_LIBS ${DARKNET_LINK_LIBS} ${OpenCV_LIBS})


FIND_PACKAGE (OpenMP QUIET) # optional
IF (NOT OPENMP_FOUND)
	MESSAGE (WARNING "OpenMP not found. Building Darknet without support for OpenMP.")
ELSE ()
	MESSAGE (STATUS "Found OpenMP ${OpenMP_VERSION}")
	ADD_COMPILE_DEFINITIONS (OPENMP)
	SET (DARKNET_LINK_LIBS ${DARKNET_LINK_LIBS} OpenMP::OpenMP_CXX OpenMP::OpenMP_C)
	IF (COMPILER_IS_GNU_OR_CLANG)
		ADD_COMPILE_OPTIONS(-fopenmp)
	ENDIF ()
ENDIF ()


CMAKE_DEPENDENT_OPTION (ENABLE_SSE_AND_AVX "Enable AVX and SSE optimizations (Intel and AMD only)" ON "COMPILER_IS_GNU_OR_CLANG;HARDWARE_IS_X86" OFF)
IF (NOT ENABLE_SSE_AND_AVX)
	MESSAGE (WARNING "AVX and SSE optimizations are disabled.")
ELSE ()
	MESSAGE (STATUS "Enabling AVX and SSE optimizations.")
	ADD_COMPILE_OPTIONS(-ffp-contract=fast)
	ADD_COMPILE_OPTIONS(-mavx)
	ADD_COMPILE_OPTIONS(-mavx2)
	ADD_COMPILE_OPTIONS(-msse3)
	ADD_COMPILE_OPTIONS(-msse4.1)
	ADD_COMPILE_OPTIONS(-msse4.2)
	ADD_COMPILE_OPTIONS(-msse4a)
ENDIF ()

#MESSAGE (STATUS "Link: ${DARKNET_LINK_LIBS}")
